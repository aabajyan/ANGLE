diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4e9fbde..ef980c1 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,5 +1,15 @@
+cmake_minimum_required(VERSION 3.10)
+set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+set(CMAKE_CXX_EXTENSIONS OFF)
 set_property(DIRECTORY . PROPERTY FOLDER "ANGLE")
 
+# Include minimal WebKit cmake files for standalone build
+include("${CMAKE_CURRENT_SOURCE_DIR}/webkit_patches/cmake/WebKitCommon-minimal.cmake")
+include("${CMAKE_CURRENT_SOURCE_DIR}/webkit_patches/cmake/WebKitCompilerFlags-minimal.cmake")
+include("${CMAKE_CURRENT_SOURCE_DIR}/webkit_patches/cmake/WebKitMacros-minimal.cmake")
+include("${CMAKE_CURRENT_SOURCE_DIR}/webkit_patches/cmake/DetectSSE2.cmake")
+
 if (APPLE)
     set(is_mac TRUE)
 elseif (WIN32)
diff --git a/CMakeLists.txt b/CMakeLists.txt
index ef980c1..63c6b2f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -267,3 +267,14 @@ target_link_libraries(ANGLEFramework INTERFACE ANGLE)
 target_include_directories(ANGLEFramework INTERFACE ${ANGLE_FRAMEWORK_HEADERS_DIR})
 
 add_library(ANGLE::ANGLE ALIAS ANGLEFramework)
+
+# Install targets and headers
+install(TARGETS ANGLE GLESv2 EGL
+    EXPORT ANGLETargets
+    ARCHIVE DESTINATION lib
+    LIBRARY DESTINATION lib
+    RUNTIME DESTINATION bin
+)
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/
+    DESTINATION include
+)
\ No newline at end of file
diff --git a/CMakeLists.txt b/CMakeLists.txt
index fef43b8..5f7634d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,3 +1,4 @@
+project(ANGLE LANGUAGES C CXX)
 cmake_minimum_required(VERSION 3.10)
 set(CMAKE_CXX_STANDARD 17)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
@@ -269,12 +270,27 @@ target_include_directories(ANGLEFramework INTERFACE ${ANGLE_FRAMEWORK_HEADERS_DI
 add_library(ANGLE::ANGLE ALIAS ANGLEFramework)
 
 # Install targets and headers
-install(TARGETS ANGLE GLESv2 EGL
-    EXPORT ANGLETargets
-    ARCHIVE DESTINATION lib
-    LIBRARY DESTINATION lib
-    RUNTIME DESTINATION bin
-)
-install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/
-    DESTINATION include
-)
\ No newline at end of file
+if(TARGET ANGLE)
+    install(TARGETS ANGLE
+        EXPORT ANGLETargets
+        ARCHIVE DESTINATION lib
+        LIBRARY DESTINATION lib
+        RUNTIME DESTINATION bin
+    )
+endif()
+if(TARGET GLESv2)
+    install(TARGETS GLESv2
+        EXPORT ANGLETargets
+        ARCHIVE DESTINATION lib
+        LIBRARY DESTINATION lib
+        RUNTIME DESTINATION bin
+    )
+endif()
+if(TARGET EGL)
+    install(TARGETS EGL
+        EXPORT ANGLETargets
+        ARCHIVE DESTINATION lib
+        LIBRARY DESTINATION lib
+        RUNTIME DESTINATION bin
+    )
+endif()
\ No newline at end of file
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5f7634d..9d4cdf1 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -293,4 +293,8 @@ if(TARGET EGL)
         LIBRARY DESTINATION lib
         RUNTIME DESTINATION bin
     )
-endif()
\ No newline at end of file
+endif()
+
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/
+    DESTINATION include
+)
\ No newline at end of file
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9d4cdf1..a77fb30 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -101,6 +101,20 @@ set(ANGLE_SOURCES
     src/libANGLE/capture/serialize_mock.cpp
 )
 
+
+# Include the correct platform-specific CMake file
+if (APPLE)
+    include(PlatformMac.cmake)
+elseif (WIN32)
+    include(PlatformWin.cmake)
+elseif (UNIX AND NOT APPLE)
+    # Optionally include GTK or WPE for UNIX
+    include(PlatformGTK.cmake)
+    include(PlatformWPE.cmake)
+elseif (DEFINED PLAYSTATION)
+    include(PlatformPlayStation.cmake)
+endif()
+
 if (WIN32)
     # FIXME: DX11 support will not compile if this preprocessor definition is set
     # DirectX Documentation is setting that version to 0x700 but there is no
diff --git a/PlatformMac.cmake b/PlatformMac.cmake
index cbf1d1d..f29abd0 100644
--- a/PlatformMac.cmake
+++ b/PlatformMac.cmake
@@ -10,12 +10,19 @@ list(APPEND ANGLE_SOURCES
     ${metal_backend_sources}
 
     ${angle_translator_lib_metal_sources}
+    ${angle_translator_lib_msl_sources}
+    ${angle_translator_glsl_apple_sources}
 
-    ${libangle_gpu_info_util_mac_sources}
     ${libangle_gpu_info_util_sources}
     ${libangle_mac_sources}
 )
 
+if(IOS)
+    list(APPEND ANGLE_SOURCES ${libangle_gpu_info_util_ios_sources})
+else()
+    list(APPEND ANGLE_SOURCES ${libangle_gpu_info_util_mac_sources})
+endif()
+
 list(APPEND ANGLE_DEFINITIONS
     ANGLE_ENABLE_METAL
 )
@@ -26,5 +33,11 @@ list(APPEND ANGLEGLESv2_LIBRARIES
     ${IOKIT_LIBRARY}
     ${IOSURFACE_LIBRARY}
     ${METAL_LIBRARY}
-    ${QUARTZ_LIBRARY}
 )
+
+if (NOT IOS)
+    find_library(QUARTZ_LIBRARY Quartz)
+    list(APPEND ANGLEGLESv2_LIBRARIES
+        ${QUARTZ_LIBRARY}
+    )
+endif()
\ No newline at end of file
diff --git a/CMakeLists.txt b/CMakeLists.txt
index a77fb30..573c439 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -172,7 +172,23 @@ if (USE_ANGLE_EGL OR ENABLE_WEBGL)
         LIBANGLE_IMPLEMENTATION
     )
     target_compile_definitions(ANGLE PUBLIC ${ANGLE_DEFINITIONS})
-    target_link_libraries(ANGLE PRIVATE ZLIB::ZLIB ${CMAKE_DL_LIBS})
+
+    # Check if ZLIB::ZLIB is available, otherwise fetch zlib from GitHub
+    find_package(ZLIB QUIET)
+    if (NOT ZLIB_FOUND)
+        include(FetchContent)
+        FetchContent_Declare(
+            zlib
+            GIT_REPOSITORY https://github.com/madler/zlib.git
+            GIT_TAG v1.3.1
+        )
+        FetchContent_MakeAvailable(zlib)
+        set(ZLIB_LIB zlib)
+    else()
+        set(ZLIB_LIB ZLIB::ZLIB)
+    endif()
+
+    target_link_libraries(ANGLE PRIVATE ${ZLIB_LIB} ${CMAKE_DL_LIBS})
 
     target_compile_definitions(ANGLEFramework INTERFACE ${gl_prototypes})
 
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 573c439..95a3d2e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -44,11 +44,17 @@ set(gl_prototypes
     EGL_EGLEXT_PROTOTYPES
 )
 
-# Default library types for ANGLE
-# Override these in Platform*.cmake for your port as needed.
-set(ANGLE_LIBRARY_TYPE STATIC)
-set(GLESv2_LIBRARY_TYPE STATIC)
-set(EGL_LIBRARY_TYPE STATIC)
+option(BUILD_SHARED_LIBS "Build ANGLE libraries as shared" OFF)
+set(ANGLE_LIBRARY_TYPE "STATIC" CACHE STRING "Library type for ANGLE (STATIC or SHARED)")
+set(GLESv2_LIBRARY_TYPE "STATIC" CACHE STRING "Library type for GLESv2 (STATIC or SHARED)")
+set(EGL_LIBRARY_TYPE "STATIC" CACHE STRING "Library type for EGL (STATIC or SHARED)")
+
+# If BUILD_SHARED_LIBS is ON, set all library types to SHARED
+if(BUILD_SHARED_LIBS)
+    set(ANGLE_LIBRARY_TYPE SHARED)
+    set(GLESv2_LIBRARY_TYPE SHARED)
+    set(EGL_LIBRARY_TYPE SHARED)
+endif()
 
 # ANGLE makes a number of small static libraries that are then joined into a
 # bigger library that is built shared. Rather than making the small libraries
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 95a3d2e..1af0c22 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -12,7 +12,13 @@ include("${CMAKE_CURRENT_SOURCE_DIR}/webkit_patches/cmake/WebKitMacros-minimal.c
 include("${CMAKE_CURRENT_SOURCE_DIR}/webkit_patches/cmake/DetectSSE2.cmake")
 
 if (APPLE)
-    set(is_mac TRUE)
+    if(IOS)
+        set(is_ios TRUE)
+    else()
+        set(is_mac TRUE)
+    endif()
+    
+    set(is_apple TRUE)
 elseif (WIN32)
     set(is_win TRUE)
     set(angle_enable_d3d9 TRUE)
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1af0c22..1e580de 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,5 +1,5 @@
-project(ANGLE LANGUAGES C CXX)
 cmake_minimum_required(VERSION 3.10)
+project(ANGLE LANGUAGES C CXX)
 set(CMAKE_CXX_STANDARD 17)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
 set(CMAKE_CXX_EXTENSIONS OFF)
@@ -10,6 +10,7 @@ include("${CMAKE_CURRENT_SOURCE_DIR}/webkit_patches/cmake/WebKitCommon-minimal.c
 include("${CMAKE_CURRENT_SOURCE_DIR}/webkit_patches/cmake/WebKitCompilerFlags-minimal.cmake")
 include("${CMAKE_CURRENT_SOURCE_DIR}/webkit_patches/cmake/WebKitMacros-minimal.cmake")
 include("${CMAKE_CURRENT_SOURCE_DIR}/webkit_patches/cmake/DetectSSE2.cmake")
+include(GNUInstallDirs)
 
 if (APPLE)
     if(IOS)
@@ -201,6 +202,17 @@ if (USE_ANGLE_EGL OR ENABLE_WEBGL)
     endif()
 
     target_link_libraries(ANGLE PRIVATE ${ZLIB_LIB} ${CMAKE_DL_LIBS})
+    if (is_apple)
+        target_link_libraries(ANGLE PRIVATE
+            "-framework CoreGraphics"
+            "-framework CoreFoundation"
+            "-framework IOKit"
+            "-framework Metal"
+            "-framework QuartzCore"
+            "-framework Foundation"
+            "-framework IOSurface"
+        )
+    endif()
 
     target_compile_definitions(ANGLEFramework INTERFACE ${gl_prototypes})
 
@@ -315,28 +327,28 @@ add_library(ANGLE::ANGLE ALIAS ANGLEFramework)
 if(TARGET ANGLE)
     install(TARGETS ANGLE
         EXPORT ANGLETargets
-        ARCHIVE DESTINATION lib
-        LIBRARY DESTINATION lib
-        RUNTIME DESTINATION bin
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
     )
 endif()
 if(TARGET GLESv2)
     install(TARGETS GLESv2
         EXPORT ANGLETargets
-        ARCHIVE DESTINATION lib
-        LIBRARY DESTINATION lib
-        RUNTIME DESTINATION bin
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
     )
 endif()
 if(TARGET EGL)
     install(TARGETS EGL
         EXPORT ANGLETargets
-        ARCHIVE DESTINATION lib
-        LIBRARY DESTINATION lib
-        RUNTIME DESTINATION bin
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
     )
 endif()
 
 install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/
-    DESTINATION include
+    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
 )
\ No newline at end of file
